c
service.errors[:card].pluck(:reference_number)
service.errors[:card]
service.errors[:card].keys
service.errors[:card][0][:reference_number]
service.errors[:card][0]
service.errors[:card]["reference_number"]
service.errors[:card][:reference_number]
service.errors[:card]
service.errors[:card
service.errors
c
service.errors
expect(service.errors).to exist
c
t
c
params[:page]
params(:page)
params
page
c
email[:email]
email
c
params.permit
email
c
params
email
c
service.card.card_transaction
service.card
service
service.results
service.result
c
issued_card
c
service.success?
service.result
service.results
service.result
service
issued_card
c
issued_card
c
cmd.success?
cmd.results
cmd.result
cmd
c
cmd
c
cmd
c
cmd
c
service.result
service.results
service
c
cards
card
c
cards
c
service.errors
service.success?
c
issued_params
card_params
card
c
card_transaction.errors.messages
card_transaction.errors.message
c
card_transaction.errors.messages
card_transaction.errors.message
card_transaction.errors
card_transaction.save
card_transaction.errors
card_transaction
c
params[:page]
params
page
c
pagy.items
pagy.page
pagy.count
pagy
c
brands
brand
c
pagy.count
pagy
c
pagy.count
pagy
pagy.total
pagy.page
pagy
c
Brand.where(filter_params)
filter_params
c
current_app
c
current_app
c
current_app
c
current_user
c
authenticate
c
authenticate
c
request.headers
request.headers[:username]
c
new_client
c
new_client
new_clients
c
new_client
c
new_client
expect(client).to be_valid
client_1 = build(:client)
build(:client_1)
Client.first
Country.first
Country.fist
client
c
client
